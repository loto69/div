<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File" position="(150, 150)" />
		<node id="1" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table" position="(300, 150)" />
		<node id="2" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File (1)" position="(148.0, 259.0)" />
		<node id="3" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(298.0, 259.0)" />
		<node id="4" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (1)" position="(294.0, 369.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="1" source_node_id="2" sink_node_id="3" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="2" source_node_id="2" sink_node_id="4" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="pickle">gASVuggAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIwxQzovVXNlcnMvaGFyaS9Eb3dubG9hZHMvc3ludGhldGljX2NsdXN0ZXJzXzI1LmNzdpSM
BnByZWZpeJSMB2Jhc2VkaXKUjAdyZWxwYXRolIwZc3ludGhldGljX2NsdXN0ZXJzXzI1LmNzdpSM
BXRpdGxllIwAlIwFc2hlZXSUaBCMC2ZpbGVfZm9ybWF0lE51YmgGKYGUfZQoaAmMIEM6L1VzZXJz
L2hhcmkvRG93bmxvYWRzL1RlbXAuY3N2lGgLaAxoDYwIVGVtcC5jc3aUaA9oEGgRaBBoEk51YmgG
KYGUfZQoaAmMKEM6L1VzZXJzL2hhcmkvRG93bmxvYWRzL2hhYXJfZGF0YXNldC5jc3aUaAtoDGgN
jBBoYWFyX2RhdGFzZXQuY3N2lGgPaBBoEWgQaBJOdWJoBimBlH2UKGgJjDBDOi9Vc2Vycy9oYXJp
L0Rvd25sb2Fkcy9tYXJrZXRfYmFza2V0XzIwcm93cy5jc3aUaAtoDGgNjBhtYXJrZXRfYmFza2V0
XzIwcm93cy5jc3aUaA9oEGgRaBBoEk51YmgGKYGUfZQoaAmMK0M6L1VzZXJzL2hhcmkvRG93bmxv
YWRzL2ttZWFuc19kYXRhc2V0Lnhsc3iUaAtoDGgNjBNrbWVhbnNfZGF0YXNldC54bHN4lGgPaBBo
EWgQaBJOdWJoBimBlH2UKGgJjCRDOi9Vc2Vycy9oYXJpL0Rvd25sb2Fkcy9zdHVkZW50cy5jc3aU
aAtoDGgNjAxzdHVkZW50cy5jc3aUaA9oEGgRaBBoEk51YmgGKYGUfZQoaAmMMEM6L1VzZXJzL1ZB
SVNITkFWSS5NL0Rvd25sb2Fkcy9oZWFydF9kaXNlYXNlLmNzdpRoC05oDU5oD2gQaBFoEGgSTnVi
aAYpgZR9lChoCYwmQzovVXNlcnMvaGFyaS9Eb3dubG9hZHMvc2FsZXNfZGF0YS5jc3aUaAtoDGgN
jA5zYWxlc19kYXRhLmNzdpRoD2gQaBFoEGgSTnViaAYpgZR9lChoCYxWQzovVXNlcnMvaGFyaS9B
cHBEYXRhL0xvY2FsL1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0
YXNldHMvaXJpcy50YWKUaAuMD3NhbXBsZS1kYXRhc2V0c5RoDYwIaXJpcy50YWKUaA9oEGgRaBBo
Ek51YmgGKYGUfZQoaAmMWUM6L1VzZXJzL2hhcmkvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFu
Z2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL3RpdGFuaWMudGFilGgLaDFoDYwL
dGl0YW5pYy50YWKUaA9oEGgRaBBoEk51YmgGKYGUfZQoaAmMWUM6L1VzZXJzL2hhcmkvQXBwRGF0
YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRz
L2hvdXNpbmcudGFilGgLaDFoDYwLaG91c2luZy50YWKUaA9oEGgRaBBoEk51YmgGKYGUfZQoaAmM
X0M6L1VzZXJzL2hhcmkvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFj
a2FnZXMvT3JhbmdlL2RhdGFzZXRzL2hlYXJ0X2Rpc2Vhc2UudGFilGgLaDFoDYwRaGVhcnRfZGlz
ZWFzZS50YWKUaA9oEGgRaBBoEk51YmgGKYGUfZQoaAmMYEM6L1VzZXJzL2hhcmkvQXBwRGF0YS9M
b2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL2Jy
b3duLXNlbGVjdGVkLnRhYpRoC2gxaA2MEmJyb3duLXNlbGVjdGVkLnRhYpRoD2gQaBFoEGgSTnVi
aAYpgZR9lChoCYxVQzovVXNlcnMvaGFyaS9BcHBEYXRhL0xvY2FsL1Byb2dyYW1zL09yYW5nZS9M
aWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvem9vLnRhYpRoC2gxaA2MB3pvby50YWKU
aA9oEGgRaBBoEk51YmWMC3JlY2VudF91cmxzlF2UjBNzYXZlZFdpZGdldEdlb21ldHJ5lENCAdnQ
ywADAAAAAAHrAAAAjAAABEQAAAL1AAAB7AAAAKoAAARDAAAC9AAAAAAAAAAABgAAAAHsAAAAqgAA
BEMAAAL0lIwLc2hlZXRfbmFtZXOUfZSMBnNvdXJjZZRLAIwDdXJslGgQjA1kb21haW5fZWRpdG9y
lH2UjAtfX3ZlcnNpb25fX5RLAYwQY29udGV4dF9zZXR0aW5nc5RdlIwVb3Jhbmdld2lkZ2V0LnNl
dHRpbmdzlIwHQ29udGV4dJSTlCmBlH2UKIwGdmFsdWVzlH2UKIwJdmFyaWFibGVzlF2UaE99lGhb
XZQoXZQojAhGZWF0dXJlMZSMFE9yYW5nZS5kYXRhLnZhcmlhYmxllIwSQ29udGludW91c1Zhcmlh
YmxllJOUSwBoEIhlXZQojAhGZWF0dXJlMpRoY0sAaBCIZV2UKIwHQ2x1c3RlcpRoYYwQRGlzY3Jl
dGVWYXJpYWJsZZSTlEsBaBCIZWVzaFFLAXWMCmF0dHJpYnV0ZXOUjAhGZWF0dXJlMZRLAoaUjAhG
ZWF0dXJlMpRLAoaUjAdDbHVzdGVylEsChpSHlIwFbWV0YXOUKYwKY2xhc3NfdmFyc5QpjBJtb2Rp
ZmllZF92YXJpYWJsZXOUXZR1YmF1Lg==
</properties>
		<properties node_id="1" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf9\x00\x00\x06\x00\x00\x00\x03\x90\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x05\xff\x00\x00\x03\x8f\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x05\xff\x00\x00\x03\x8f', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="2" format="pickle">gASVvgkAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIwnQzovVXNlcnMvVklLUkFNL0Rlc2t0b3AvRFYvY2x1c3Rlci54bHN4lIwGcHJlZml4lE6M
B3JlbHBhdGiUTowFdGl0bGWUjACUjAVzaGVldJRoDowLZmlsZV9mb3JtYXSUTnViaAYpgZR9lCho
CYwrQzovVXNlcnMvaGFyaS9Eb3dubG9hZHMvY29tcGxleF9kYXRhc2V0LmNzdpRoC4wHYmFzZWRp
cpRoDIwTY29tcGxleF9kYXRhc2V0LmNzdpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYwxQzovVXNl
cnMvaGFyaS9Eb3dubG9hZHMvc3ludGhldGljX2NsdXN0ZXJzXzI1LmNzdpRoC2gUaAyMGXN5bnRo
ZXRpY19jbHVzdGVyc18yNS5jc3aUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMIEM6L1VzZXJzL2hh
cmkvRG93bmxvYWRzL1RlbXAuY3N2lGgLaBRoDIwIVGVtcC5jc3aUaA1oDmgPaA5oEE51YmgGKYGU
fZQoaAmMKEM6L1VzZXJzL2hhcmkvRG93bmxvYWRzL2hhYXJfZGF0YXNldC5jc3aUaAtoFGgMjBBo
YWFyX2RhdGFzZXQuY3N2lGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjDBDOi9Vc2Vycy9oYXJpL0Rv
d25sb2Fkcy9tYXJrZXRfYmFza2V0XzIwcm93cy5jc3aUaAtoFGgMjBhtYXJrZXRfYmFza2V0XzIw
cm93cy5jc3aUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMK0M6L1VzZXJzL2hhcmkvRG93bmxvYWRz
L2ttZWFuc19kYXRhc2V0Lnhsc3iUaAtoFGgMjBNrbWVhbnNfZGF0YXNldC54bHN4lGgNaA5oD2gO
aBBOdWJoBimBlH2UKGgJjCRDOi9Vc2Vycy9oYXJpL0Rvd25sb2Fkcy9zdHVkZW50cy5jc3aUaAto
FGgMjAxzdHVkZW50cy5jc3aUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMMEM6L1VzZXJzL1ZBSVNI
TkFWSS5NL0Rvd25sb2Fkcy9oZWFydF9kaXNlYXNlLmNzdpRoC05oDE5oDWgOaA9oDmgQTnViaAYp
gZR9lChoCYwmQzovVXNlcnMvaGFyaS9Eb3dubG9hZHMvc2FsZXNfZGF0YS5jc3aUaAtoFGgMjA5z
YWxlc19kYXRhLmNzdpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYw0RDovT3JhbmdlL0xpYi9zaXRl
LXBhY2thZ2VzL09yYW5nZS9kYXRhc2V0cy9pcmlzLnRhYpRoC4wPc2FtcGxlLWRhdGFzZXRzlGgM
jAhpcmlzLnRhYpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYw3RDovT3JhbmdlL0xpYi9zaXRlLXBh
Y2thZ2VzL09yYW5nZS9kYXRhc2V0cy90aXRhbmljLnRhYpRoC2g4aAyMC3RpdGFuaWMudGFilGgN
aA5oD2gOaBBOdWJoBimBlH2UKGgJjDdEOi9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3Jhbmdl
L2RhdGFzZXRzL2hvdXNpbmcudGFilGgLaDhoDIwLaG91c2luZy50YWKUaA1oDmgPaA5oEE51YmgG
KYGUfZQoaAmMPUQ6L09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvaGVh
cnRfZGlzZWFzZS50YWKUaAtoOGgMjBFoZWFydF9kaXNlYXNlLnRhYpRoDWgOaA9oDmgQTnViaAYp
gZR9lChoCYw+RDovT3JhbmdlL0xpYi9zaXRlLXBhY2thZ2VzL09yYW5nZS9kYXRhc2V0cy9icm93
bi1zZWxlY3RlZC50YWKUaAtoOGgMjBJicm93bi1zZWxlY3RlZC50YWKUaA1oDmgPaA5oEE51YmgG
KYGUfZQoaAmMM0Q6L09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvem9v
LnRhYpRoC2g4aAyMB3pvby50YWKUaA1oDmgPaA5oEE51YmWMC3JlY2VudF91cmxzlF2UjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAHrAAAAjAAABEQAAAL1AAAB7AAAAKoAAARDAAAC
9AAAAAAAAAAABgAAAAHsAAAAqgAABEMAAAL0lIwLc2hlZXRfbmFtZXOUfZSMBnNvdXJjZZRLAIwD
dXJslGgOjA1kb21haW5fZWRpdG9ylH2UjAtfX3ZlcnNpb25fX5RLAYwQY29udGV4dF9zZXR0aW5n
c5RdlCiMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9
lCiMCXZhcmlhYmxlc5RdlGhWfZRoYl2UKF2UKIwIRmVhdHVyZTGUjBRPcmFuZ2UuZGF0YS52YXJp
YWJsZZSMEkNvbnRpbnVvdXNWYXJpYWJsZZSTlEsAaA6IZV2UKIwIRmVhdHVyZTKUaGpLAGgOiGVl
c2hYSwF1jAphdHRyaWJ1dGVzlIwIRmVhdHVyZTGUSwKGlIwIRmVhdHVyZTKUSwKGlIaUjAVtZXRh
c5QpjApjbGFzc192YXJzlCmMEm1vZGlmaWVkX3ZhcmlhYmxlc5RdlHViaF0pgZR9lChoYH2UKIwJ
dmFyaWFibGVzlF2UjA1kb21haW5fZWRpdG9ylH2UaHpdlChdlCiMAklElGhqSwBoDohlXZQojAhG
ZWF0dXJlMZRoaksAaA6IZV2UKIwIRmVhdHVyZTKUaGpLAGgOiGVlc2hYSwF1aG2MAklElEsChpSM
CEZlYXR1cmUxlEsChpSMCEZlYXR1cmUylEsChpSHlGhzKWh0KWh1XZR1YmhdKYGUfZQoaGB9lCho
el2UaHx9lGh6XZQoXZQojAhGZWF0dXJlMZRoaksAaA6IZV2UKIwIRmVhdHVyZTKUaGpLAGgOiGVd
lCiMB0NsdXN0ZXKUaGiMEERpc2NyZXRlVmFyaWFibGWUk5RLAWgOiGVlc2hYSwF1aG2MCEZlYXR1
cmUxlEsChpSMCEZlYXR1cmUylEsChpSMB0NsdXN0ZXKUSwKGlIeUaHMpaHQpaHVdlHViZXUu
</properties>
		<properties node_id="3" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01o\x00\x00\x00~\x00\x00\x04\x90\x00\x00\x02\xf4\x00\x00\x01p\x00\x00\x00\x9c\x00\x00\x04\x8f\x00\x00\x02\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01p\x00\x00\x00\x9c\x00\x00\x04\x8f\x00\x00\x02\xf3', 'scriptLibrary': [{'name': 'Table from numpy', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Convert Orange Table to pandas DataFrame safely\ncolnames = [attr.name for attr in in_data.domain.attributes]\ndf = pd.DataFrame(in_data.X, columns=colnames)\n\n# If clusters are available in metas, include them\nif in_data.domain.has_metas():\n    meta_names = [m.name for m in in_data.domain.metas]\n    for i, name in enumerate(meta_names):\n        df[name] = in_data.metas[:, i]\n\n# Now plot histogram of Feature1 grouped by cluster (if present)\nplt.figure(figsize=(8,6))\n\nif \'Cluster\' in df.columns:   # when k-Means is connected\n    for cluster, subset in df.groupby("Cluster"):\n        plt.hist(subset["Feature1"], bins=10, alpha=0.5, label=f"Cluster {cluster}")\n    plt.legend()\nelse:\n    plt.hist(df["Feature1"], bins=10, color="gray", alpha=0.7)\n\nplt.xlabel("Feature1")\nplt.ylabel("Frequency")\nplt.title("Histogram of Feature1 by Cluster")\nplt.show()\n', 'filename': None}], 'scriptText': 'import numpy as np\nfrom sklearn.cluster import AgglomerativeClustering\nimport matplotlib.pyplot as plt\n\n# Convert Orange Table to numpy\nX = np.array([list(row) for row in in_data])\n\n# --- Agglomerative Clustering ---\nagg = AgglomerativeClustering(n_clusters=3)\nagg_labels = agg.fit_predict(X)\n\nplt.figure(figsize=(6,4))\nplt.scatter(X[:,0], X[:,1], c=agg_labels, cmap=\'rainbow\')\nplt.xlabel("Feature1")\nplt.ylabel("Feature2")\nplt.title("Agglomerative Clustering (3 clusters)")\nplt.show()\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa1\x00\x00\x00a\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': True, '__version__': 2}</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01o\x00\x00\x00~\x00\x00\x04\x90\x00\x00\x02\xf4\x00\x00\x01p\x00\x00\x00\x9c\x00\x00\x04\x8f\x00\x00\x02\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01p\x00\x00\x00\x9c\x00\x00\x04\x8f\x00\x00\x02\xf3', 'scriptLibrary': [{'name': 'Table from numpy', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Convert Orange Table to pandas DataFrame safely\ncolnames = [attr.name for attr in in_data.domain.attributes]\ndf = pd.DataFrame(in_data.X, columns=colnames)\n\n# If clusters are available in metas, include them\nif in_data.domain.has_metas():\n    meta_names = [m.name for m in in_data.domain.metas]\n    for i, name in enumerate(meta_names):\n        df[name] = in_data.metas[:, i]\n\n# Now plot histogram of Feature1 grouped by cluster (if present)\nplt.figure(figsize=(8,6))\n\nif \'Cluster\' in df.columns:   # when k-Means is connected\n    for cluster, subset in df.groupby("Cluster"):\n        plt.hist(subset["Feature1"], bins=10, alpha=0.5, label=f"Cluster {cluster}")\n    plt.legend()\nelse:\n    plt.hist(df["Feature1"], bins=10, color="gray", alpha=0.7)\n\nplt.xlabel("Feature1")\nplt.ylabel("Frequency")\nplt.title("Histogram of Feature1 by Cluster")\nplt.show()\n', 'filename': None}], 'scriptText': 'import numpy as np\nfrom sklearn.cluster import AgglomerativeClustering\nimport matplotlib.pyplot as plt\n\nX = np.array([list(row) for row in in_data])\n\n# --- Divisive Clustering ---\ndef divisive_clustering(X, n_clusters=3):\n    clusters = [X]  # start with all points in one cluster\n    while len(clusters) &lt; n_clusters:\n        cluster_to_split = max(clusters, key=len)\n        clusters.remove(cluster_to_split)\n        clustering = AgglomerativeClustering(n_clusters=2)\n        labels = clustering.fit_predict(cluster_to_split)\n        clusters.append(cluster_to_split[labels == 0])\n        clusters.append(cluster_to_split[labels == 1])\n    return clusters\n\nclusters = divisive_clustering(X, n_clusters=3)\n\ncolors = [\'red\',\'green\',\'blue\']\nplt.figure(figsize=(6,4))\nfor cluster, color in zip(clusters, colors):\n    plt.scatter(cluster[:,0], cluster[:,1], c=color)\nplt.xlabel("Feature1")\nplt.ylabel("Feature2")\nplt.title("Divisive Clustering (3 clusters)")\nplt.show()\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa1\x00\x00\x00a\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': True, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
